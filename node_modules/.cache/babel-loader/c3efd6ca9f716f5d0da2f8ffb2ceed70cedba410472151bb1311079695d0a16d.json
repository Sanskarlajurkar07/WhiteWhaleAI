{"ast":null,"code":"var _jsxFileName = \"E:\\\\VectorShift Ai\\\\vectorshift-frontend--technical-assignment\\\\src\\\\components\\\\nodes\\\\ValidationNode.js\",\n  _s = $RefreshSig$();\nimport { BaseNode } from \"./BaseNode\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ValidationNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [rules, setRules] = useState((data === null || data === void 0 ? void 0 : data.rules) || []);\n  const [newRule, setNewRule] = useState(\"\");\n  const addRule = () => {\n    if (newRule.trim()) {\n      setRules([...rules, newRule.trim()]);\n      setNewRule(\"\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    title: \"Validation\",\n    inputs: [{\n      id: \"input\"\n    }],\n    outputs: [{\n      id: \"valid\"\n    }, {\n      id: \"invalid\"\n    }],\n    type: \"validation\",\n    data: data,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"node-input\",\n        type: \"text\",\n        value: newRule,\n        onChange: e => setNewRule(e.target.value),\n        placeholder: \"Add validation rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addRule,\n        children: \"Add Rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"rules-list\",\n        children: rules.map((rule, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: rule\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(ValidationNode, \"fwg8m9Z4ldKa22lDu8LTGupplgI=\");\n_c = ValidationNode;\nvar _c;\n$RefreshReg$(_c, \"ValidationNode\");","map":{"version":3,"names":["BaseNode","useState","jsxDEV","_jsxDEV","ValidationNode","id","data","_s","rules","setRules","newRule","setNewRule","addRule","trim","title","inputs","outputs","type","children","className","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","rule","index","_c","$RefreshReg$"],"sources":["E:/VectorShift Ai/vectorshift-frontend--technical-assignment/src/components/nodes/ValidationNode.js"],"sourcesContent":["import {BaseNode} from \"./BaseNode\";\r\nimport {useState} from \"react\";\r\n\r\nexport const ValidationNode = ({id, data}) => {\r\n  const [rules, setRules] = useState(data?.rules || []);\r\n  const [newRule, setNewRule] = useState(\"\");\r\n\r\n  const addRule = () => {\r\n    if (newRule.trim()) {\r\n      setRules([...rules, newRule.trim()]);\r\n      setNewRule(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <BaseNode\r\n      id={id}\r\n      title=\"Validation\"\r\n      inputs={[{id: \"input\"}]}\r\n      outputs={[{id: \"valid\"}, {id: \"invalid\"}]}\r\n      type=\"validation\"\r\n      data={data}\r\n    >\r\n      <div>\r\n        <input\r\n          className=\"node-input\"\r\n          type=\"text\"\r\n          value={newRule}\r\n          onChange={(e) => setNewRule(e.target.value)}\r\n          placeholder=\"Add validation rule\"\r\n        />\r\n        <button onClick={addRule}>Add Rule</button>\r\n        <ul className=\"rules-list\">\r\n          {rules.map((rule, index) => (\r\n            <li key={index}>{rule}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </BaseNode>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAAQA,QAAQ,QAAO,YAAY;AACnC,SAAQC,QAAQ,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,OAAO,MAAMC,cAAc,GAAGA,CAAC;EAACC,EAAE;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,CAAAK,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,KAAK,KAAI,EAAE,CAAC;EACrD,MAAM,CAACE,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAMW,OAAO,GAAGA,CAAA,KAAM;IACpB,IAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,EAAE;MAClBJ,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEE,OAAO,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;MACpCF,UAAU,CAAC,EAAE,CAAC;IAChB;EACF,CAAC;EAED,oBACER,OAAA,CAACH,QAAQ;IACPK,EAAE,EAAEA,EAAG;IACPS,KAAK,EAAC,YAAY;IAClBC,MAAM,EAAE,CAAC;MAACV,EAAE,EAAE;IAAO,CAAC,CAAE;IACxBW,OAAO,EAAE,CAAC;MAACX,EAAE,EAAE;IAAO,CAAC,EAAE;MAACA,EAAE,EAAE;IAAS,CAAC,CAAE;IAC1CY,IAAI,EAAC,YAAY;IACjBX,IAAI,EAAEA,IAAK;IAAAY,QAAA,eAEXf,OAAA;MAAAe,QAAA,gBACEf,OAAA;QACEgB,SAAS,EAAC,YAAY;QACtBF,IAAI,EAAC,MAAM;QACXG,KAAK,EAAEV,OAAQ;QACfW,QAAQ,EAAGC,CAAC,IAAKX,UAAU,CAACW,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC5CI,WAAW,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFzB,OAAA;QAAQ0B,OAAO,EAAEjB,OAAQ;QAAAM,QAAA,EAAC;MAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC3CzB,OAAA;QAAIgB,SAAS,EAAC,YAAY;QAAAD,QAAA,EACvBV,KAAK,CAACsB,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,kBACrB7B,OAAA;UAAAe,QAAA,EAAiBa;QAAI,GAAZC,KAAK;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAC3B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEf,CAAC;AAACrB,EAAA,CArCWH,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}