{"ast":null,"code":"var _jsxFileName = \"E:\\\\VectorShift Ai\\\\vectorshift-frontend--technical-assignment\\\\src\\\\utils\\\\uiToolkit.js\",\n  _s = $RefreshSig$();\n// ui.js\n// Displays the drag-and-drop UI\n// --------------------------------------------------\n\nimport { useState, useRef, useCallback } from \"react\";\nimport ReactFlow, { Controls, Background, MiniMap } from \"reactflow\";\nimport { useStore } from \"../state/store\";\nimport { InputNode } from \"../components/nodes/inputNode\";\nimport { LLMNode } from \"../components/nodes/llmNode\";\nimport { OutputNode } from \"../components/nodes/outputNode\";\nimport { TextNode } from \"../components/nodes/textNode\";\nimport { FilterNode } from \"../components/nodes/FilterNode\";\nimport { TemplateNode } from \"../components/nodes/TemplateNode\";\nimport { ValidationNode } from \"../components/nodes/ValidationNode\";\nimport { TransformNode } from \"../components/nodes/TransformNode\";\nimport { MergeNode } from \"../components/nodes/MergeNode\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst gridSize = 20;\nconst proOptions = {\n  hideAttribution: true\n};\nconst nodeTypes = {\n  customInput: InputNode,\n  llm: LLMNode,\n  customOutput: OutputNode,\n  text: TextNode,\n  filter: FilterNode,\n  template: TemplateNode,\n  validation: ValidationNode,\n  transform: TransformNode,\n  merge: MergeNode\n};\nexport const PipelineUI = () => {\n  _s();\n  const reactFlowWrapper = useRef(null);\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\n\n  // Get store values and actions\n  const nodes = useStore(state => state.nodes);\n  const edges = useStore(state => state.edges);\n  const onNodesChange = useStore(state => state.onNodesChange);\n  const onEdgesChange = useStore(state => state.onEdgesChange);\n  const onConnect = useStore(state => state.onConnect);\n  const addNode = useStore(state => state.addNode);\n  const getNodeID = useStore(state => state.getNodeID);\n  const handleRemoveNode = useStore(state => state.removeNode);\n  const getInitNodeData = useCallback((nodeID, type) => {\n    return {\n      id: nodeID,\n      nodeType: `${type}`\n    };\n  }, []);\n  const onDrop = useCallback(event => {\n    event.preventDefault();\n    const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\n    const appData = event.dataTransfer.getData(\"application/reactflow\");\n    if (!appData) return;\n    try {\n      const parsedData = JSON.parse(appData);\n      const type = parsedData === null || parsedData === void 0 ? void 0 : parsedData.nodeType;\n      if (!type) return;\n      const position = reactFlowInstance.project({\n        x: event.clientX - reactFlowBounds.left,\n        y: event.clientY - reactFlowBounds.top\n      });\n      const nodeID = getNodeID(type);\n      const newNode = {\n        id: nodeID,\n        type,\n        position,\n        data: {\n          ...getInitNodeData(nodeID, type),\n          onRemove: handleRemoveNode\n        }\n      };\n      addNode(newNode);\n    } catch (error) {\n      console.error(\"Error processing drop:\", error);\n    }\n  }, [reactFlowInstance, addNode, getNodeID, getInitNodeData, handleRemoveNode]);\n  const onDragOver = useCallback(event => {\n    event.preventDefault();\n    event.dataTransfer.dropEffect = \"move\";\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: reactFlowWrapper,\n    style: {\n      width: \"100wv\",\n      height: \"70vh\"\n    },\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onConnect: onConnect,\n      onDrop: onDrop,\n      onDragOver: onDragOver,\n      onInit: setReactFlowInstance,\n      nodeTypes: nodeTypes,\n      proOptions: proOptions,\n      snapGrid: [gridSize, gridSize],\n      connectionLineType: \"smoothstep\",\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: gridSize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n_s(PipelineUI, \"k+MwFZTaA47F+tr++nU294Ur1v0=\", false, function () {\n  return [useStore, useStore, useStore, useStore, useStore, useStore, useStore, useStore];\n});\n_c = PipelineUI;\nvar _c;\n$RefreshReg$(_c, \"PipelineUI\");","map":{"version":3,"names":["useState","useRef","useCallback","ReactFlow","Controls","Background","MiniMap","useStore","InputNode","LLMNode","OutputNode","TextNode","FilterNode","TemplateNode","ValidationNode","TransformNode","MergeNode","jsxDEV","_jsxDEV","gridSize","proOptions","hideAttribution","nodeTypes","customInput","llm","customOutput","text","filter","template","validation","transform","merge","PipelineUI","_s","reactFlowWrapper","reactFlowInstance","setReactFlowInstance","nodes","state","edges","onNodesChange","onEdgesChange","onConnect","addNode","getNodeID","handleRemoveNode","removeNode","getInitNodeData","nodeID","type","id","nodeType","onDrop","event","preventDefault","reactFlowBounds","current","getBoundingClientRect","appData","dataTransfer","getData","parsedData","JSON","parse","position","project","x","clientX","left","y","clientY","top","newNode","data","onRemove","error","console","onDragOver","dropEffect","ref","style","width","height","children","onInit","snapGrid","connectionLineType","fitView","color","gap","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/VectorShift Ai/vectorshift-frontend--technical-assignment/src/utils/uiToolkit.js"],"sourcesContent":["// ui.js\r\n// Displays the drag-and-drop UI\r\n// --------------------------------------------------\r\n\r\nimport {useState, useRef, useCallback} from \"react\";\r\nimport ReactFlow, {Controls, Background, MiniMap} from \"reactflow\";\r\nimport {useStore} from \"../state/store\";\r\nimport {InputNode} from \"../components/nodes/inputNode\";\r\nimport {LLMNode} from \"../components/nodes/llmNode\";\r\nimport {OutputNode} from \"../components/nodes/outputNode\";\r\nimport {TextNode} from \"../components/nodes/textNode\";\r\nimport {FilterNode} from \"../components/nodes/FilterNode\";\r\nimport {TemplateNode} from \"../components/nodes/TemplateNode\";\r\nimport {ValidationNode} from \"../components/nodes/ValidationNode\";\r\nimport {TransformNode} from \"../components/nodes/TransformNode\";\r\nimport {MergeNode} from \"../components/nodes/MergeNode\";\r\n\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst gridSize = 20;\r\nconst proOptions = {hideAttribution: true};\r\nconst nodeTypes = {\r\n  customInput: InputNode,\r\n  llm: LLMNode,\r\n  customOutput: OutputNode,\r\n  text: TextNode,\r\n  filter: FilterNode,\r\n  template: TemplateNode,\r\n  validation: ValidationNode,\r\n  transform: TransformNode,\r\n  merge: MergeNode,\r\n};\r\n\r\nexport const PipelineUI = () => {\r\n  const reactFlowWrapper = useRef(null);\r\n  const [reactFlowInstance, setReactFlowInstance] = useState(null);\r\n  \r\n  // Get store values and actions\r\n  const nodes = useStore((state) => state.nodes);\r\n  const edges = useStore((state) => state.edges);\r\n  const onNodesChange = useStore((state) => state.onNodesChange);\r\n  const onEdgesChange = useStore((state) => state.onEdgesChange);\r\n  const onConnect = useStore((state) => state.onConnect);\r\n  const addNode = useStore((state) => state.addNode);\r\n  const getNodeID = useStore((state) => state.getNodeID);\r\n  const handleRemoveNode = useStore((state) => state.removeNode);\r\n\r\n  const getInitNodeData = useCallback((nodeID, type) => {\r\n    return { id: nodeID, nodeType: `${type}` };\r\n  }, []);\r\n\r\n  const onDrop = useCallback(\r\n    (event) => {\r\n      event.preventDefault();\r\n\r\n      const reactFlowBounds = reactFlowWrapper.current.getBoundingClientRect();\r\n      const appData = event.dataTransfer.getData(\"application/reactflow\");\r\n      \r\n      if (!appData) return;\r\n      \r\n      try {\r\n        const parsedData = JSON.parse(appData);\r\n        const type = parsedData?.nodeType;\r\n\r\n        if (!type) return;\r\n\r\n        const position = reactFlowInstance.project({\r\n          x: event.clientX - reactFlowBounds.left,\r\n          y: event.clientY - reactFlowBounds.top,\r\n        });\r\n\r\n        const nodeID = getNodeID(type);\r\n        const newNode = {\r\n          id: nodeID,\r\n          type,\r\n          position,\r\n          data: {\r\n            ...getInitNodeData(nodeID, type),\r\n            onRemove: handleRemoveNode,\r\n          },\r\n        };\r\n\r\n        addNode(newNode);\r\n      } catch (error) {\r\n        console.error(\"Error processing drop:\", error);\r\n      }\r\n    },\r\n    [reactFlowInstance, addNode, getNodeID, getInitNodeData, handleRemoveNode]\r\n  );\r\n\r\n  const onDragOver = useCallback((event) => {\r\n    event.preventDefault();\r\n    event.dataTransfer.dropEffect = \"move\";\r\n  }, []);\r\n\r\n  return (\r\n    <div ref={reactFlowWrapper} style={{ width: \"100wv\", height: \"70vh\" }}>\r\n      <ReactFlow\r\n        nodes={nodes}\r\n        edges={edges}\r\n        onNodesChange={onNodesChange}\r\n        onEdgesChange={onEdgesChange}\r\n        onConnect={onConnect}\r\n        onDrop={onDrop}\r\n        onDragOver={onDragOver}\r\n        onInit={setReactFlowInstance}\r\n        nodeTypes={nodeTypes}\r\n        proOptions={proOptions}\r\n        snapGrid={[gridSize, gridSize]}\r\n        connectionLineType=\"smoothstep\"\r\n        fitView\r\n      >\r\n        <Background color=\"#aaa\" gap={gridSize} />\r\n        <Controls />\r\n        <MiniMap />\r\n      </ReactFlow>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}