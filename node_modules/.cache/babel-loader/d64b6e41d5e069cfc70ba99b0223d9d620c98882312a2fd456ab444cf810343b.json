{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// store.js\n\nimport { create } from \"zustand\";\nimport { addEdge, applyNodeChanges, applyEdgeChanges, MarkerType } from \"reactflow\";\n\n// Separate slice for node-related state and actions\nconst createNodeSlice = (set, get) => ({\n  nodes: [],\n  nodeIDs: {},\n  getNodeID: type => {\n    const newIDs = {\n      ...get().nodeIDs\n    };\n    newIDs[type] = (newIDs[type] || 0) + 1;\n    set({\n      nodeIDs: newIDs\n    });\n    return `${type}-${newIDs[type]}`;\n  },\n  addNode: node => set(state => ({\n    nodes: [...state.nodes, node]\n  })),\n  removeNode: nodeId => set(state => ({\n    nodes: state.nodes.filter(node => node.id !== nodeId),\n    edges: state.edges.filter(edge => edge.source !== nodeId && edge.target !== nodeId)\n  })),\n  onNodesChange: changes => set(state => ({\n    nodes: applyNodeChanges(changes, state.nodes)\n  })),\n  updateNodeField: (nodeId, fieldName, fieldValue) => set(state => ({\n    nodes: state.nodes.map(node => node.id === nodeId ? {\n      ...node,\n      data: {\n        ...node.data,\n        [fieldName]: fieldValue\n      }\n    } : node)\n  }))\n});\n\n// Separate slice for edge-related state and actions\nconst createEdgeSlice = set => ({\n  edges: [],\n  onEdgesChange: changes => set(state => ({\n    edges: applyEdgeChanges(changes, state.edges)\n  })),\n  onConnect: connection => set(state => ({\n    edges: addEdge({\n      ...connection,\n      type: \"smoothstep\",\n      animated: true,\n      markerEnd: {\n        type: MarkerType.Arrow,\n        height: \"20px\",\n        width: \"20px\"\n      }\n    }, state.edges)\n  }))\n});\n\n// Create the store\nconst useStore = create((set, get) => ({\n  ...createNodeSlice(set, get),\n  ...createEdgeSlice(set)\n}));\n\n// Selectors\nconst useNodes = () => {\n  _s();\n  return useStore(state => state.nodes);\n};\n_s(useNodes, \"tRpAAnpj2/w/nb/IphdrVKKBg0Y=\", false, function () {\n  return [useStore];\n});\nconst useEdges = () => {\n  _s2();\n  return useStore(state => state.edges);\n};\n_s2(useEdges, \"tRpAAnpj2/w/nb/IphdrVKKBg0Y=\", false, function () {\n  return [useStore];\n});\nconst useStoreActions = () => {\n  _s3();\n  return useStore(state => ({\n    addNode: state.addNode,\n    removeNode: state.removeNode,\n    onNodesChange: state.onNodesChange,\n    onEdgesChange: state.onEdgesChange,\n    onConnect: state.onConnect,\n    updateNodeField: state.updateNodeField,\n    getNodeID: state.getNodeID\n  }));\n};\n\n// Export everything at the end\n_s3(useStoreActions, \"tRpAAnpj2/w/nb/IphdrVKKBg0Y=\", false, function () {\n  return [useStore];\n});\nexport { useStore, useNodes, useEdges, useStoreActions };","map":{"version":3,"names":["create","addEdge","applyNodeChanges","applyEdgeChanges","MarkerType","createNodeSlice","set","get","nodes","nodeIDs","getNodeID","type","newIDs","addNode","node","state","removeNode","nodeId","filter","id","edges","edge","source","target","onNodesChange","changes","updateNodeField","fieldName","fieldValue","map","data","createEdgeSlice","onEdgesChange","onConnect","connection","animated","markerEnd","Arrow","height","width","useStore","useNodes","_s","useEdges","_s2","useStoreActions","_s3"],"sources":["E:/VectorShift Ai/vectorshift-frontend--technical-assignment/src/state/store.js"],"sourcesContent":["// store.js\r\n\r\nimport {create} from \"zustand\";\r\nimport {\r\n  addEdge,\r\n  applyNodeChanges,\r\n  applyEdgeChanges,\r\n  MarkerType,\r\n} from \"reactflow\";\r\n\r\n// Separate slice for node-related state and actions\r\nconst createNodeSlice = (set, get) => ({\r\n  nodes: [],\r\n  nodeIDs: {},\r\n  getNodeID: (type) => {\r\n    const newIDs = {...get().nodeIDs};\r\n    newIDs[type] = (newIDs[type] || 0) + 1;\r\n    set({nodeIDs: newIDs});\r\n    return `${type}-${newIDs[type]}`;\r\n  },\r\n  addNode: (node) =>\r\n    set((state) => ({\r\n      nodes: [...state.nodes, node],\r\n    })),\r\n  removeNode: (nodeId) =>\r\n    set((state) => ({\r\n      nodes: state.nodes.filter((node) => node.id !== nodeId),\r\n      edges: state.edges.filter(\r\n        (edge) => edge.source !== nodeId && edge.target !== nodeId\r\n      ),\r\n    })),\r\n  onNodesChange: (changes) =>\r\n    set((state) => ({\r\n      nodes: applyNodeChanges(changes, state.nodes),\r\n    })),\r\n  updateNodeField: (nodeId, fieldName, fieldValue) =>\r\n    set((state) => ({\r\n      nodes: state.nodes.map((node) =>\r\n        node.id === nodeId\r\n          ? {...node, data: {...node.data, [fieldName]: fieldValue}}\r\n          : node\r\n      ),\r\n    })),\r\n});\r\n\r\n// Separate slice for edge-related state and actions\r\nconst createEdgeSlice = (set) => ({\r\n  edges: [],\r\n  onEdgesChange: (changes) =>\r\n    set((state) => ({\r\n      edges: applyEdgeChanges(changes, state.edges),\r\n    })),\r\n  onConnect: (connection) =>\r\n    set((state) => ({\r\n      edges: addEdge(\r\n        {\r\n          ...connection,\r\n          type: \"smoothstep\",\r\n          animated: true,\r\n          markerEnd: {\r\n            type: MarkerType.Arrow,\r\n            height: \"20px\",\r\n            width: \"20px\",\r\n          },\r\n        },\r\n        state.edges\r\n      ),\r\n    })),\r\n});\r\n\r\n// Create the store\r\nconst useStore = create((set, get) => ({\r\n  ...createNodeSlice(set, get),\r\n  ...createEdgeSlice(set),\r\n}));\r\n\r\n// Selectors\r\nconst useNodes = () => useStore((state) => state.nodes);\r\nconst useEdges = () => useStore((state) => state.edges);\r\nconst useStoreActions = () => useStore((state) => ({\r\n  addNode: state.addNode,\r\n  removeNode: state.removeNode,\r\n  onNodesChange: state.onNodesChange,\r\n  onEdgesChange: state.onEdgesChange,\r\n  onConnect: state.onConnect,\r\n  updateNodeField: state.updateNodeField,\r\n  getNodeID: state.getNodeID,\r\n}));\r\n\r\n// Export everything at the end\r\nexport { useStore, useNodes, useEdges, useStoreActions };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}