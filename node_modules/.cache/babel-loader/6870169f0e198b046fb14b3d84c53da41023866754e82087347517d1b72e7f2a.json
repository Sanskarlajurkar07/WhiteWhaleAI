{"ast":null,"code":"var _jsxFileName = \"E:\\\\VectorShift Ai\\\\vectorshift-frontend--technical-assignment\\\\src\\\\components\\\\nodes\\\\textNode.js\",\n  _s = $RefreshSig$();\n// textNode.js\n\nimport { BaseNode } from \"./BaseNode\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [currText, setCurrText] = useState((data === null || data === void 0 ? void 0 : data.text) || \"{{input}}\");\n  const [variables, setVariables] = useState([]);\n  const textareaRef = useRef(null);\n  useEffect(() => {\n    const matches = currText.match(/\\{\\{([^}]+)\\}\\}/g) || [];\n    const vars = matches.map(match => match.slice(2, -2).trim());\n    setVariables([...new Set(vars)]);\n  }, [currText]);\n  return /*#__PURE__*/_jsxDEV(BaseNode, {\n    id: id,\n    title: \"Text\",\n    inputs: variables.map(v => ({\n      id: v\n    })),\n    outputs: [{\n      id: \"output\"\n    }],\n    type: \"text\",\n    data: data,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: textareaRef,\n      className: \"node-input\",\n      value: currText,\n      onChange: e => setCurrText(e.target.value),\n      placeholder: \"Enter text with {{variables}}\",\n      style: {\n        minHeight: \"80px\",\n        resize: \"vertical\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), variables.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"variables-list\",\n      children: [\"Variables: \", variables.join(\", \")]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"UVwZ5NevuRYLeE1KQ5kKGWsh96k=\");\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["BaseNode","useState","useEffect","useRef","jsxDEV","_jsxDEV","TextNode","id","data","_s","currText","setCurrText","text","variables","setVariables","textareaRef","matches","match","vars","map","slice","trim","Set","title","inputs","v","outputs","type","children","ref","className","value","onChange","e","target","placeholder","style","minHeight","resize","fileName","_jsxFileName","lineNumber","columnNumber","length","join","_c","$RefreshReg$"],"sources":["E:/VectorShift Ai/vectorshift-frontend--technical-assignment/src/components/nodes/textNode.js"],"sourcesContent":["// textNode.js\r\n\r\nimport {BaseNode} from \"./BaseNode\";\r\nimport {useState, useEffect, useRef} from \"react\";\r\n\r\nexport const TextNode = ({id, data}) => {\r\n  const [currText, setCurrText] = useState(data?.text || \"{{input}}\");\r\n  const [variables, setVariables] = useState([]);\r\n  const textareaRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const matches = currText.match(/\\{\\{([^}]+)\\}\\}/g) || [];\r\n    const vars = matches.map((match) => match.slice(2, -2).trim());\r\n    setVariables([...new Set(vars)]);\r\n  }, [currText]);\r\n\r\n  return (\r\n    <BaseNode\r\n      id={id}\r\n      title=\"Text\"\r\n      inputs={variables.map((v) => ({id: v}))}\r\n      outputs={[{id: \"output\"}]}\r\n      type=\"text\"\r\n      data={data}\r\n    >\r\n      <textarea\r\n        ref={textareaRef}\r\n        className=\"node-input\"\r\n        value={currText}\r\n        onChange={(e) => setCurrText(e.target.value)}\r\n        placeholder=\"Enter text with {{variables}}\"\r\n        style={{\r\n          minHeight: \"80px\",\r\n          resize: \"vertical\",\r\n        }}\r\n      />\r\n      {variables.length > 0 && (\r\n        <div className=\"variables-list\">Variables: {variables.join(\", \")}</div>\r\n      )}\r\n    </BaseNode>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;;AAEA,SAAQA,QAAQ,QAAO,YAAY;AACnC,SAAQC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAACC,EAAE;EAAEC;AAAI,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAAO,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEI,IAAI,KAAI,WAAW,CAAC;EACnE,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMc,WAAW,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAEhCD,SAAS,CAAC,MAAM;IACd,MAAMc,OAAO,GAAGN,QAAQ,CAACO,KAAK,CAAC,kBAAkB,CAAC,IAAI,EAAE;IACxD,MAAMC,IAAI,GAAGF,OAAO,CAACG,GAAG,CAAEF,KAAK,IAAKA,KAAK,CAACG,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC;IAC9DP,YAAY,CAAC,CAAC,GAAG,IAAIQ,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC;EAClC,CAAC,EAAE,CAACR,QAAQ,CAAC,CAAC;EAEd,oBACEL,OAAA,CAACL,QAAQ;IACPO,EAAE,EAAEA,EAAG;IACPgB,KAAK,EAAC,MAAM;IACZC,MAAM,EAAEX,SAAS,CAACM,GAAG,CAAEM,CAAC,KAAM;MAAClB,EAAE,EAAEkB;IAAC,CAAC,CAAC,CAAE;IACxCC,OAAO,EAAE,CAAC;MAACnB,EAAE,EAAE;IAAQ,CAAC,CAAE;IAC1BoB,IAAI,EAAC,MAAM;IACXnB,IAAI,EAAEA,IAAK;IAAAoB,QAAA,gBAEXvB,OAAA;MACEwB,GAAG,EAAEd,WAAY;MACjBe,SAAS,EAAC,YAAY;MACtBC,KAAK,EAAErB,QAAS;MAChBsB,QAAQ,EAAGC,CAAC,IAAKtB,WAAW,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC7CI,WAAW,EAAC,+BAA+B;MAC3CC,KAAK,EAAE;QACLC,SAAS,EAAE,MAAM;QACjBC,MAAM,EAAE;MACV;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EACD7B,SAAS,CAAC8B,MAAM,GAAG,CAAC,iBACnBtC,OAAA;MAAKyB,SAAS,EAAC,gBAAgB;MAAAF,QAAA,GAAC,aAAW,EAACf,SAAS,CAAC+B,IAAI,CAAC,IAAI,CAAC;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CACvE;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEf,CAAC;AAACjC,EAAA,CApCWH,QAAQ;AAAAuC,EAAA,GAARvC,QAAQ;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}